# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: yosafe_subpackage_1_workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-subpackage-1:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Install Poetry
      run: |
        python -m pip install --user pipx
        python -m pipx ensurepath
        pipx install poetry
        poetry config virtualenvs.in-project true

    - name: Cache dependencies
      uses: actions/cache@v4
      id: cache
      with:
        path: ./.venv
        key: venv-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        poetry lock
        poetry install


    - name: Test with pytest
      run: |
        source .venv/bin/activate
        pip list
        poetry run pytest -s

  
  conditional-job:
    runs-on: ubuntu-latest
    needs: test-subpackage-1
    ##if: needs.test-subpackage-1.outputs.cache-hit != 'true'
    env:
      G_ACCESS_TOKEN: ${{ secrets.G_ACCESS_TOKEN }}
      G_EMAIL: ${{ secrets.G_EMAIL }}
      G_NAME: ${{ secrets.G_NAME }}
      PARENT_REPOSITORY: ${{ secrets.PARENT_REPOSITORY }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install pipx and Poetry
        run: |
          # Install pipx
          python -m pip install --user pipx
          python -m pipx ensurepath
          
          # Install Poetry
          pipx install poetry
          poetry config virtualenvs.in-project true

      - name: Clone the parent repository
        run: |
          git clone https://$PARENT_REPOSITORY
          cd yosafe_packages

      - name: Update version and commit changes
        run: |
          # Update version
          cd yosafe_packages
          
          git config --global user.name "$G_NAME"
          git config --global user.email "$G_EMAIL"

          # List contents of the directory for debugging purposes
          ls

          # Ensure Poetry dependencies are locked and update the version
          poetry lock
          poetry version patch

          # Commit and push changes to the main branch
          git add .
          git commit -m "${{ github.event.head_commit.message }}"

        
          git remote set-url origin https://${G_NAME}:$G_ACCESS_TOKEN@github.com/${G_NAME}/yosafe_packages.git

          # Push changes to the main branch and set it as the upstream branch
          git push --set-upstream origin main
